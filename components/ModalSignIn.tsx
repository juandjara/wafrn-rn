import {
  useLoginMutation,
  useLoginMfaMutation,
  getInstanceEnvironment,
} from '@/lib/api/auth'
import { Link } from 'expo-router'
import { useState } from 'react'
import {
  TextInput,
  Button,
  View,
  Text
} from 'react-native'
import { useThemeColor } from '@/hooks/useThemeColor'
import { Colors } from '@/constants/Colors'
import { ScrollView } from 'react-native-gesture-handler'
import { showToastError } from '@/lib/interaction'
import InstanceProvider from '@/components/InstanceProvider'
import { useQuery } from '@tanstack/react-query'

export default function ModalSignIn({
  onLoginComplete,
}: {
  onLoginComplete: (token: string, instance: string) => void
}) {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [mfaToken, setMfaToken] = useState('')
  const [firstPassToken, setFirstPassToken] = useState('')
  const [instance, setInstance] = useState<string | null>(null)

  const { data: env } = useQuery({
    queryKey: ['modalSignIn-environment'],
    queryFn: () => getInstanceEnvironment(instance!),
    enabled: !!instance,
  })

  const color = useThemeColor({}, 'text')
  const loginMfaMutation = useLoginMfaMutation(env)
  const loginMutation = useLoginMutation(env)

  async function completeLogin(token: string) {
    onLoginComplete(token, instance!)
  }

  function login() {
    if (env) {
      loginMutation.mutate(
        { email, password },
        {
          onSuccess: async (firstPassResponse) => {
            if (firstPassResponse.mfaRequired) {
              setFirstPassToken(firstPassResponse.token)
            } else {
              await completeLogin(firstPassResponse.token)
            }
          },
          onError: (error) => {
            console.error(error)
            showToastError('Invalid credentials')
          },
        },
      )
    }
  }

  function loginMfa() {
    if (env) {
      loginMfaMutation.mutate(
        { firstPassToken, mfaToken },
        {
          onSuccess: (token) => completeLogin(token),
          onError: (error) => {
            console.error(error)
            showToastError('Invalid credentials')
            setMfaToken('')
            setFirstPassToken('')
          },
        },
      )
    }
  }

  return (
    <View
      className="flex-1 px-4"
      style={{
        paddingTop: 16,
        backgroundColor: Colors.dark.background,
      }}
    >
      <ScrollView>
        <InstanceProvider
          savedInstance={instance}
          setSavedInstance={setInstance}
        >
          {!firstPassToken && (
            <>
              <View className="mt-3">
                <TextInput
                  inputMode="email"
                  autoCapitalize="none"
                  autoCorrect={false}
                  placeholder="Email"
                  style={{ color }}
                  className="p-3 my-3 border border-gray-500 rounded placeholder:text-gray-400"
                  value={email}
                  onChangeText={setEmail}
                />
                <TextInput
                  secureTextEntry
                  autoCapitalize="none"
                  placeholder="Password"
                  style={{ color }}
                  className="p-3 my-3 border border-gray-500 rounded placeholder:text-gray-400"
                  value={password}
                  onChangeText={setPassword}
                />
                <Link href="/password-reset" className="text-blue-500 pb-3">
                  Forgot your password?
                </Link>
              </View>
              <View className="py-3">
                <Button
                  disabled={
                    loginMutation.isPending || !env || !email || !password
                  }
                  title={loginMutation.isPending ? 'Loading...' : 'Sign in'}
                  onPress={login}
                />
              </View>
              <Text className="py-3 text-white">
                Don't have an account?{' '}
                <Link href="/register" className="text-blue-500">
                  Register here
                </Link>
              </Text>
            </>
          )}
          {firstPassToken && (
            <>
              <Text className="py-3 text-white">
                Please enter your token generated by your Authenticator
                application
              </Text>
              <View className="mt-3">
                <TextInput
                  inputMode="numeric"
                  autoCapitalize="none"
                  placeholder="Token"
                  style={{ color }}
                  className="p-3 my-3 border border-gray-500 rounded placeholder:text-gray-400"
                  value={mfaToken}
                  onChangeText={setMfaToken}
                />
                <Link href="/password-reset" className="text-blue-500 pb-3">
                  Lost your device?
                </Link>
              </View>
              <View className="py-3">
                <Button
                  disabled={loginMfaMutation.isPending || !env || !mfaToken}
                  title={
                    loginMfaMutation.isPending ? 'Loading...' : 'Sign in'
                  }
                  onPress={loginMfa}
                />
              </View>
            </>
          )}
        </InstanceProvider>
      </ScrollView>
    </View>
  )
}
